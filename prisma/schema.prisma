generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  phone           String?
  company         String?
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  advancePayments AdvancePayment[]
  customers       Customer[]
  payments        Payment[]
  sales           Sale[]
}

model Customer {
  id               String           @id @default(cuid())
  name             String
  phone            String?
  email            String?
  address          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           String
  dueAmount        Float            @default(0)
  lastPurchaseDate DateTime?
  advanceBalance   Float            @default(0)
  advancePayments  AdvancePayment[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments         Payment[]
  sales            Sale[]

  @@index([userId])
}

model Sale {
  id                String    @id @default(cuid())
  invoiceNo         String    @unique
  customerId        String
  userId            String
  items             Json
  totalAmount       Float
  paidAmount        Float     @default(0)
  dueAmount         Float
  paymentType       String
  status            String    @default("pending")
  dueDate           DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bankTransactionId String?
  deliveryAddress   Json?
  deliveryDate      DateTime?
  deliveryNotes     String?
  deliveryStatus    String?   @default("pending")
  discountAmount    Float?    @default(0)
  discountType      String?
  discountValue     Float?    @default(0)
  isBackDate        Boolean?  @default(false)
  paymentMode       String?   @default("cash")
  paymentReference  String?
  saleDate          DateTime? @default(now())
  payments          Payment[]
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  advancePayments   AdvancePayment[]

  @@index([userId])
  @@index([customerId])
  @@index([deliveryStatus])
}

model Payment {
  id              String   @id @default(cuid())
  saleId          String
  amount          Float
  method          String
  notes           String?
  createdAt       DateTime @default(now())
  customerId      String
  referenceNumber String?
  userId          String
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sale            Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([customerId])
  @@index([userId])
}

model AdvancePayment {
  id          String       @id @default(cuid())
  customerId  String
  userId      String
  amount      Float
  type        AdvanceType
  description String?
  reference   String?
  notes       String?
  saleId      String?
  createdAt   DateTime     @default(now())
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sale        Sale?        @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([userId])
  @@index([createdAt])
  @@index([saleId])
}

enum AdvanceType {
  ADVANCE_ADDED
  ADVANCE_PAYMENT
  ADVANCE_USED
}